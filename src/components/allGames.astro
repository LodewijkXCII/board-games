---
export const prerender = false;

import { db, isNull, count, Game_Sessions, Board_Games, eq } from "astro:db";

const boardgames = await db
  .select({
    Board_Games,
    sessionCount: count(Game_Sessions.id).as("session_count"),
  })
  .from(Board_Games)
  .leftJoin(Game_Sessions, eq(Board_Games.id, Game_Sessions.board_games_id))
  .where(isNull(Board_Games.deleted_at))
  .groupBy(Board_Games.id)
  .orderBy(Board_Games.name);

if (!boardgames) {
  return Astro.redirect("/500");
}
---

<div>
  <section class="container-fluid">
    <h3>Filters:</h3>
    <div class="filter grid">
      <label>
        <input name="terms" type="checkbox" role="switch" id="playedFilter" />
        <strong>Niet gespeeld</strong>
      </label>
      <input
        type="search"
        name="search"
        placeholder="Zoeken"
        aria-label="Search"
        id="search"
      />
    </div>
    <hr />
    <h3>Spel overzicht</h3>
    <p>Totaal aantal spellen: {boardgames.length}</p>
    <div class="board-game-list">
      {
        boardgames.map(({ Board_Games, sessionCount }) => (
          <article
            class="board-game-item"
            data-played={Board_Games.played ? "true" : "false"}
            data-name={Board_Games.name}
          >
            <header>
              <h4>{Board_Games.name}</h4>
            </header>
            <p>
              Voor {Board_Games.minplayers} tot {Board_Games.maxplayers}{" "}
              spelers. (Beste voor <strong>{Board_Games.bggbestplayers}</strong>{" "}
              spelers)
            </p>
            <p>
              {sessionCount} keer gespeeld.
              {sessionCount > 0 && (
                <a href={`sessie?game=${Board_Games.id}`}>Bekijk sessies</a>
              )}
            </p>

            <a
              href={`sessie/toevoegen/${Board_Games.id}/${Board_Games.name
                .replace(/ /g, "-")
                .replace(/[^\w-]+/g, "")
                .toLowerCase()}`}
            >
              Sessie toevoegen
            </a>
            <footer class:list={[{ gespeeld: Board_Games.played }]}>
              {Board_Games.played ? "Gepeeld" : "Niet gespeeld"}
            </footer>
          </article>
        ))
      }
    </div>
  </section>
</div>

<script>
  const toggleSwitch = document.getElementById("playedFilter");
  const gameList = document.querySelectorAll(".board-game-item");
  const searchBox = document.getElementById("search");

  toggleSwitch.addEventListener("click", () => {
    if (toggleSwitch.checked) {
      gameList.forEach((game) => {
        if (game.dataset.played === "true") {
          game.classList.add("visualy-hidden");
        }
      });
    } else {
      gameList.forEach((game) => {
        if (game.dataset.played === "true") {
          game.classList.remove("visualy-hidden");
        }
      });
    }
  });

  searchBox.addEventListener("input", (e) => {
    const searchValue = e.target.value.toLowerCase();

    [...gameList].forEach((game) => {
      const gameName = game.dataset.name.toLowerCase();

      if (gameName.includes(searchValue)) {
        game.classList.remove("visualy-hidden");
        return;
      } else {
        game.classList.add("visualy-hidden");
      }
    });
  });
</script>
